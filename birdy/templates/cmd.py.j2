import click
from click import STRING, INT, FLOAT, BOOL
from requests.exceptions import SSLError
import OpenSSL
from six.moves.urllib.parse import quote
from owslib.wps import WebProcessingService
from owslib.wps import ComplexDataInput
from owslib.wps import SYNC, ASYNC
from birdy.cli.types import COMPLEX
from birdy.cli.misc import monitor
from birdy.exceptions import ConnectionError

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.version_option(version="{{ version }}")
{% for option in options %}
@click.option('--{{ option.name }}', help='{{ option.help }}',
              type={{ option.type }}, multiple={{ option.multiple }})
{% endfor %}
@click.pass_context
def cli(ctx, **options):
    """{{ help }}"""
    headers = {}
    if 'token' in ctx.obj:
        headers = {'Authorization': 'Bearer {}'.format(ctx.obj['token'])}
    verify = ctx.obj.get('verify', True)
    cert = ctx.obj.get('cert')
    send = ctx.obj.get('send', False)
    if send and cert:
        with open(cert, 'r') as fh:
            headers = {'X-Ssl-Client-Cert': quote(fh.read())}
    language = ctx.obj.get('language')
    wps = WebProcessingService('{{ url }}', skip_caps=True, verify=verify, cert=cert, headers=headers, language=language)
    inputs = []
    for opt in options.keys():
        if not options[opt]:
            # skip unset parameters (probably optional)
            continue
        if isinstance(options[opt], ComplexDataInput):
            inputs.append(("{}".format(opt), options[opt]))
        else:
            inputs.append(("{}".format(opt), "{}".format(options[opt])))
    if ctx.obj.get('sync', False):
        mode = SYNC
    else:
        mode = ASYNC
    try:
        outputs = ctx.obj.get('outputs')
        formats = [outputs] if outputs else None 
        execution = wps.execute('{{ name }}', inputs=inputs, output=formats, mode=mode)
        monitor(execution)
    except SSLError:
        raise ConnectionError('SSL verification of server certificate failed.')
    except OpenSSL.SSL.Error:
        raise ConnectionError('SSL error occurred. Did you use an invalid client certificate?')
    except Exception as err:
        if 'AccessForbidden' in str(err):
            msg = 'Access to service is forbidden.'
        else:
            msg = 'Connection failed.'
        raise ConnectionError(msg)
